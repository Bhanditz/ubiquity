<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<head>
  <title>Ubiquity Image Manipulation Commands</title>
</head>
<body>
<p>This xhtml source contains commands for searching the Web.  Its
corresponding feed is <a href="search.html">here</a>.</p>
<script src="fake-infrastructure.js"></script>

<div id="rotate">
  <ol>
    <li>Select an image (or multiple images).</li>
    <li>Click and drag the rotator below to rotate the selected image(s).</li>
  </ol>
  <center><div id="control"></div></center>
  <style>
  #control{
    width: 80px; height: 80px;
    color: black; background-color: white;
    -moz-border-radius: 45px; border-top: 5px solid #cc6600;
  }
  </style>
</div>

<script class="commands"><![CDATA[

CmdUtils.CreateCommand({
  name: "rotate-image",
  _rotate: function( elems, deg ){
    jQuery.each(elems, function(){
      jQuery(this).css("-moz-transform", "rotate(%sdeg)".replace(/%s/, deg));
    })
  },
  
  
  _imgsFromSelection: function( context ){
    var sel = context.focusedWindow.getSelection();
    var document = context.focusedWindow.document;
    
    if( sel.rangeCount < 1 ) return [];
    var range = sel.getRangeAt(0);
    
    // TODO: This is overly aggressive and finds things that are
    // outside the current selection. This logic should be fixed
    // (requires playing with the ranges begining and ending and
    // offsets) and moved into the selection variable. We currently
    // have input.text and input.html. We'll need an input.pointer
    // or input.selection or something.
    return jQuery.find( "img", range.commonAncestorContainer);    
  },
  
  preview: function( pblock ){
    pblock.innerHTML = jQuery("#rotate", feed.dom).html()
    var self = this;
    
    var handleControl = function(event){
      var controlPos = jQuery(event.currentTarget).position();
      var controlWidth = jQuery(event.currentTarget).width();
      var controlHeight = jQuery(event.currentTarget).height();
          
      var x = event.clientX - controlPos.left - controlWidth/2;
      var y = event.clientY - controlPos.top - controlHeight/2;
      
      var angle = Math.atan( y/x )/Math.PI*180 + 90;
      if( x < 0 ) angle += 180;
      
      self._rotate( jQuery("#control", pblock), angle );
      var imgs = self._imgsFromSelection( context ); 
      self._rotate( imgs, angle );
    };

    jQuery("#control", pblock).mousedown(function(event){
      pblock.inDrag = true;
    });

    jQuery("#control", pblock).mouseup(function(){
        pblock.inDrag = false;
    });
    
    jQuery("#control", pblock).mousemove(function( event ){
      if( pblock.inDrag ) handleControl( event );
    });
    
    jQuery("#control", pblock).mousedown( handleControl );

  },
  execute: function() {}
});

CmdUtils.CreateCommand({
  name: "flip-page",
  preview: "Flips the entire page upside down. <span style='-moz-transform:rotate(180deg)'>Useful for bats</span>.",
  execute: function() {
    var document = context.focusedWindow.document;
    jQuery(document.body).css("-moz-transform", "rotate(180deg)");
  }
});
]]></script>

</body>
</html>